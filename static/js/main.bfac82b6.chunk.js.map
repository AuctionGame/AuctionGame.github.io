{"version":3,"sources":["components/admin.js","components/predict.js","components/home.js","components/players.js","components/rules.js","App.js","serviceWorker.js","index.js"],"names":["Admin","Predict","React","Component","Home","props","state","round","this","setState","firebase","collection","doc","onSnapshot","snap","console","log","data","pid","updateRound","err","Player","Rules","App","speed","tabValue","handleChange","bind","event","newValue","AppBar","position","color","id","Tabs","variant","aria-label","value","onChange","Tab","label","to","component","Link","path","Boolean","window","location","hostname","match","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sTAMeA,MAJf,WACE,OAAO,4C,QCKMC,E,uKAJX,OAAO,oD,GAFWC,IAAMC,WC0CbC,E,kDAvCb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,MAAO,OAHQ,E,wDAOPA,GACVC,KAAKC,SAAS,CACZF,MAAOA,M,0CAKU,IAAD,OACPG,cACIC,WAAW,SAASC,IAAI,WAEnCC,YACF,SAACC,GACCC,QAAQC,IAAI,eAAgBF,EAAKG,OAAOC,KACxC,EAAKC,YAAYL,EAAKG,OAAOC,QAE/B,SAACE,GACCL,QAAQC,IAAR,6BAAkCI,S,+BAMtC,IAAMb,EAAQC,KAAKF,MAAMC,MACzB,MAAc,eAAVA,EACK,kBAAC,EAAD,MAEA,6CAAmBA,O,GAnCbL,IAAMC,WCEVkB,MAJf,WACE,OAAO,mDCGMC,MAJf,WACE,OAAO,iDCwEMC,E,kDA7Db,aAAe,IAAD,8BACZ,gBACKjB,MAAQ,CACXkB,MAAO,GACPC,SAAU,GAIZ,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBARR,E,gEAYZnB,KAAKC,SAAS,CACZe,MAAO,O,mCAIEI,EAAOC,GAClBrB,KAAKC,SAAS,CACZgB,SAAUI,IAEZd,QAAQC,IAAI,gBAAiBa,K,+BAI7B,OACE,kBAAC,IAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,SAAS,SAASC,MAAM,cAAcC,GAAG,WAC/C,kBAACC,EAAA,EAAD,CACEC,QAAQ,YACRC,aAAW,aACXC,MAAO7B,KAAKF,MAAMmB,SAClBa,SAAU9B,KAAKkB,cAEf,kBAACa,EAAA,EAAD,CAAKC,MAAM,OAAOC,GAAG,IAAIC,UAAWC,MACpC,kBAACJ,EAAA,EAAD,CAAKC,MAAM,UAAUC,GAAG,WAAWC,UAAWC,MAC9C,kBAACJ,EAAA,EAAD,CAAKC,MAAM,QAAQC,GAAG,SAASC,UAAWC,QAI9C,yBAAKV,GAAG,gBACN,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOW,KAAK,YACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,UACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,UACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,c,GArDI1C,IAAMC,WCDJ0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCCNvC,gBAXqB,CACnBwC,OAAQ,0CACRC,WAAY,8BACZC,YAAa,qCACbC,UAAW,cACXC,cAAe,0BACfC,kBAAmB,gBACnBC,MAAO,6CACPC,cAAe,iBAKjBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNvD,QAAQuD,MAAMA,EAAMC,c","file":"static/js/main.bfac82b6.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Admin() {\n  return <h1>Hello Admin</h1>;\n}\n\nexport default Admin;\n","import React from 'react';\n\nclass Predict extends React.Component {\n  render() {\n    return <h1>Prediction Round</h1>;\n  }\n}\n\nexport default Predict;\n","import React from 'react';\nimport * as firebase from 'firebase';\nimport Predict from './predict';\n\nclass Home extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      round: '...',\n    };\n  }\n\n  updateRound(round) {\n    this.setState({\n      round: round,\n    });\n  }\n\n  // Add firebase updates and listener here\n  componentDidMount() {\n    const db = firebase.firestore();\n    const doc = db.collection('admin').doc('current');\n\n    doc.onSnapshot(\n      (snap) => {\n        console.log('Recieved pid', snap.data().pid);\n        this.updateRound(snap.data().pid);\n      },\n      (err) => {\n        console.log(`Encountered error: ${err}`);\n      },\n    );\n  }\n\n  render() {\n    const round = this.state.round;\n    if (round === 'prediction') {\n      return <Predict />;\n    } else {\n      return <h1>Current Round {round}</h1>;\n    }\n  }\n}\n\nexport default Home;\n","import React from 'react';\n\nfunction Player() {\n  return <h1>Hello Players Page</h1>;\n}\n\nexport default Player;\n","import React from 'react';\n\nfunction Rules() {\n  return <h1>Hello Rules Page</h1>;\n}\n\nexport default Rules;\n","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Link, Route, Switch } from 'react-router-dom';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\n\nimport Admin from './components/admin';\nimport Home from './components/home';\nimport Player from './components/players';\nimport Rules from './components/rules';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      speed: 10,\n      tabValue: 0,\n    };\n\n    // Don't forget to bind the functions to classes\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState({\n      speed: 30,\n    });\n  }\n\n  handleChange(event, newValue) {\n    this.setState({\n      tabValue: newValue,\n    });\n    console.log('Handle Change', newValue);\n  }\n\n  render() {\n    return (\n      <Router>\n        <AppBar position=\"static\" color=\"transparent\" id=\"nav-bar\">\n          <Tabs\n            variant=\"fullWidth\"\n            aria-label=\"Navigation\"\n            value={this.state.tabValue}\n            onChange={this.handleChange}\n          >\n            <Tab label=\"Home\" to=\"/\" component={Link} />\n            <Tab label=\"Players\" to=\"/players\" component={Link} />\n            <Tab label=\"Rules\" to=\"/rules\" component={Link} />\n          </Tabs>\n        </AppBar>\n\n        <div id=\"main-content\">\n          <Switch>\n            <Route path=\"/players\">\n              <Player />\n            </Route>\n            <Route path=\"/rules\">\n              <Rules />\n            </Route>\n            <Route path=\"/admin\">\n              <Admin />\n            </Route>\n            <Route path=\"/\">\n              <Home />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport * as firebase from 'firebase';\n\n// Your web app's Firebase configuration\nvar firebaseConfig = {\n  apiKey: 'AIzaSyAy8oi_BHmxutKBvJ2oQLaU41RB1m0qElc',\n  authDomain: 'iit-auction.firebaseapp.com',\n  databaseURL: 'https://iit-auction.firebaseio.com',\n  projectId: 'iit-auction',\n  storageBucket: 'iit-auction.appspot.com',\n  messagingSenderId: '1009078682293',\n  appId: '1:1009078682293:web:caafd6e69e15e62d29f4fc',\n  measurementId: 'G-H7K3QDLHPQ',\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}